# This is the top-most .editorconfig file
root = true

# Apply to all files in the repository
[*]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

# C# files
[*.cs]

#-------------------------------------------------------------------
# Namespace and Usings Formatting
#-------------------------------------------------------------------

# Style: Prefer file-scoped namespaces (C# 10+ feature)
csharp_style_namespace_declarations = file_scoped:error

# Quality: Enforce that the namespace matches the folder structure.
# NOTE: For this to work with `dotnet build`, you must add the following
# to your .csproj file:
# <ItemGroup>
#   <CompilerVisibleProperty Include="RootNamespace" />
#   <CompilerVisibleProperty Include="ProjectDir" />
# </ItemGroup>
dotnet_style_namespace_match_folder = true
dotnet_diagnostic.IDE0130.severity = warning

# Quality: Remove unnecessary using statements
dotnet_diagnostic.IDE0005.severity = error

# Style: Place 'using' directives inside the namespace
csharp_using_directive_placement = inside_namespace:warning

# Style: Sort 'System.*' using directives first
dotnet_sort_system_directives_first = true

#-------------------------------------------------------------------
# Code Style Preferences
#-------------------------------------------------------------------

# Style: Prefer explicit 'this.' qualification to clarify instance members
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = true:suggestion
dotnet_style_qualification_for_event = true:suggestion

# Style: Prefer 'var' for built-in types and when the type is apparent
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Style: Prefer object and collection initializers for conciseness
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion

# Style: Use expression-bodied members for simple, single-line implementations
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion

# Style: Prefer pattern matching and null-conditional operators
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_null_check_over_equals = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# Style: Prefer `nameof()` over string literals
dotnet_style_prefer_nameof = true:suggestion

#-------------------------------------------------------------------
# Whitespace and New Line Formatting
#-------------------------------------------------------------------

# Style: Require braces for all control flow statements
csharp_prefer_braces = true:warning

# Style: New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Style: Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_around_binary_operators = before_and_after

#-------------------------------------------------------------------
# Modifier and Naming Preferences
#-------------------------------------------------------------------

# Style: Prefer accessibility modifiers to be declared explicitly
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# Style: Enforce a consistent order for modifiers
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Quality: Make fields 'readonly' if they are never reassigned after construction
dotnet_diagnostic.IDE0044.severity = suggestion # Add readonly modifier
dotnet_style_readonly_field = true:suggestion

# Naming: Private fields should be prefixed with an underscore (_)
dotnet_naming_rule.private_fields_should_have_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_should_have_underscore.style = underscore_prefix
dotnet_naming_rule.private_fields_should_have_underscore.severity = suggestion

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.accessibility = private

dotnet_naming_style.underscore_prefix.capitalization = camel_case
dotnet_naming_style.underscore_prefix.required_prefix = _

# Naming: Interfaces should start with 'I' (e.g., IService)
dotnet_naming_rule.interface_should_be_pascal_case_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_pascal_case_with_i.style = pascal_case_with_i
dotnet_naming_rule.interface_should_be_pascal_case_with_i.severity = suggestion

dotnet_naming_style.pascal_case_with_i.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_i.required_prefix = I

# Naming: Async methods should end with 'Async'
dotnet_naming_rule.async_methods_should_end_in_async.symbols = public_methods
dotnet_naming_rule.async_methods_should_end_in_async.style = end_in_async
dotnet_naming_rule.async_methods_should_end_in_async.severity = warning

dotnet_naming_symbols.public_methods.applicable_kinds = method
dotnet_naming_symbols.public_methods.accessibility = public

dotnet_naming_style.end_in_async.capitalization = pascal_case
dotnet_naming_style.end_in_async.required_suffix = Async

#-------------------------------------------------------------------
# General Code Quality
#-------------------------------------------------------------------

# Quality: Flag unused parameters
dotnet_code_quality_unused_parameters = all:suggestion

# Quality: Prefer 'System.HashCode.Combine' for hash code generation
dotnet_style_prefer_system_hash_code = true:suggestion

# GODOT NOTE: The analyzer may flag engine-called methods (e.g., _Ready)
# or signal handlers as "unused private members" (IDE0051). This is a
# false positive. You should suppress this warning on a case-by-case
# basis using '#pragma warning disable IDE0051' around the method.
# Do NOT disable this rule globally, as it is very useful for finding
# actual dead code.